/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 25 23:45:44 GMT 2019
 */

package com.kechen.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.kechen.domain.User;
import com.kechen.repository.UserRepository;
import com.kechen.service.UserService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserService_ESTest extends UserService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findByEmail(anyString());
      doReturn(user0).when(userRepository0).findByUserName(anyString());
      doReturn(user0).when(userRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      boolean boolean0 = userService0.register((String) null, (String) null, "com.kechen.service.UserService", 189);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserService userService0 = new UserService();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userRepository0).findByEmail(anyString());
      doReturn((User) null).when(userRepository0).findByUserName(anyString());
      doReturn((Object) null).when(userRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      boolean boolean0 = userService0.register("/y`}Cp`Rb`lLY", "/y`}Cp`Rb`lLY", "/y`}Cp`Rb`lLY", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user0, user0, (User) null).when(userRepository0).findByEmail(anyString());
      doReturn((User) null).when(userRepository0).findByEmailAndPassword(anyString() , anyString());
      doReturn((User) null, user0).when(userRepository0).findByUserName(anyString());
      doReturn(user0, (User) null).when(userRepository0).findByUserNameAndPassword(anyString() , anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      int int0 = userService0.loginByEmail(">_TZW$!w=68i~'}", ">_TZW$!w=68i~'}");
      assertEquals(400, int0);
      
      userService0.register("", "+bPY9F6+4cOaU", "", 2343);
      int int1 = userService0.loginByUserName("G=dq (&<Bc7iTMb@", "G=dq (&<Bc7iTMb@");
      assertEquals(200, int1);
      
      userService0.register("", "", "com.kechen.service.UserService", 0);
      int int2 = userService0.loginByUserName("yOyw:7E#7s4v]i&9", "");
      assertEquals(404, int2);
      
      boolean boolean0 = userService0.register("", "]2YLO8FJ", "", 404);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user0, (User) null, (User) null).when(userRepository0).findByEmail(anyString());
      doReturn((User) null).when(userRepository0).findByEmailAndPassword(anyString() , anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      userService0.loginByEmail(">_TZW$!w=68i~'}", ">_TZW$!w=68i~'}");
      userService0.register("", "+bPY9F6+4cOaU", "", 2343);
      userService0.register("", "", "com.kechen.service.UserService", 0);
      userService0.register("", "]2YLO8FJ", "", 404);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user0, user0, (User) null).when(userRepository0).findByEmail(anyString());
      doReturn((User) null, (User) null).when(userRepository0).findByEmailAndPassword(anyString() , anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      int int0 = userService0.loginByEmail(">_TZW$!w=68i~'}", ">_TZW$!w=68i~'}");
      assertEquals(400, int0);
      
      userService0.register("", "+bPY9F6+4cOaU", "", 2343);
      boolean boolean0 = userService0.register("", "", "com.kechen.service.UserService", 0);
      assertFalse(boolean0);
      
      int int1 = userService0.loginByEmail("{<aWj", "yOyw:7E#7s4v]i&9");
      assertEquals(404, int1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findByEmailAndPassword(anyString() , anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      int int0 = userService0.loginByEmail("e/$g4CVu-\"%Z>~pv", "Uz\"F9 p");
      assertEquals(200, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UserService userService0 = new UserService();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null, user0).when(userRepository0).findByUserName(anyString());
      doReturn(user0, (User) null, (User) null).when(userRepository0).findByUserNameAndPassword(anyString() , anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      int int0 = userService0.loginByUserName("G=dq (&<Bc7iTMb@", "G=dq (&<Bc7iTMb@");
      assertEquals(200, int0);
      
      int int1 = userService0.loginByUserName("yOyw:7E#7s4v]i&9", "");
      assertEquals(404, int1);
      
      int int2 = userService0.loginByUserName("", (String) null);
      assertEquals(400, int2);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UserService userService0 = new UserService();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userRepository0).findByUserId(anyInt());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = userService0.findById((-792));
      assertNull(user0);
  }
}
