/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 26 00:19:01 GMT 2019
 */

package com.kechen.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.kechen.domain.Company;
import com.kechen.domain.Problem;
import com.kechen.repository.CompanyRepository;
import com.kechen.repository.ProblemRepository;
import com.kechen.service.ProblemService;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProblemService_ESTest extends ProblemService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ProblemService problemService0 = new ProblemService();
      Company company0 = mock(Company.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(company0).getPcSet();
      CompanyRepository companyRepository0 = mock(CompanyRepository.class, new ViolatedAssumptionAnswer());
      doReturn(company0).when(companyRepository0).findByCompanyName(anyString());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "companyRepository", (Object) companyRepository0);
      ProblemRepository problemRepository0 = mock(ProblemRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "problemRepository", (Object) problemRepository0);
      Injector.validateBean(problemService0, (Class<?>) ProblemService.class);
      // Undeclared exception!
      try { 
        problemService0.getProblemByCompanyName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.kechen.service.ProblemService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProblemService problemService0 = new ProblemService();
      CompanyRepository companyRepository0 = mock(CompanyRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "companyRepository", (Object) companyRepository0);
      ProblemRepository problemRepository0 = mock(ProblemRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(problemRepository0).findAll();
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "problemRepository", (Object) problemRepository0);
      Injector.validateBean(problemService0, (Class<?>) ProblemService.class);
      List<Problem> list0 = problemService0.getAllProblems();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProblemService problemService0 = new ProblemService();
      CompanyRepository companyRepository0 = mock(CompanyRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "companyRepository", (Object) companyRepository0);
      ProblemRepository problemRepository0 = mock(ProblemRepository.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        problemService0.getProblemByTag("M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.kechen.service.ProblemService", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProblemService problemService0 = new ProblemService();
      Company company0 = mock(Company.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(company0).getPcSet();
      CompanyRepository companyRepository0 = mock(CompanyRepository.class, new ViolatedAssumptionAnswer());
      doReturn(company0).when(companyRepository0).findByCompanyName(anyString());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "companyRepository", (Object) companyRepository0);
      ProblemRepository problemRepository0 = mock(ProblemRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(problemRepository0).findAllByDifficulty(anyInt());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "problemRepository", (Object) problemRepository0);
      Injector.validateBean(problemService0, (Class<?>) ProblemService.class);
      problemService0.deleteProblemById(0);
      problemService0.getProblemByDifficulty(0);
      // Undeclared exception!
      try { 
        problemService0.getProblemByCompanyName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.kechen.service.ProblemService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ProblemService problemService0 = new ProblemService();
      CompanyRepository companyRepository0 = mock(CompanyRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "companyRepository", (Object) companyRepository0);
      ProblemRepository problemRepository0 = mock(ProblemRepository.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        problemService0.getAllProblems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.kechen.service.ProblemService", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ProblemService problemService0 = new ProblemService();
      CompanyRepository companyRepository0 = mock(CompanyRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "companyRepository", (Object) companyRepository0);
      ProblemRepository problemRepository0 = mock(ProblemRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "problemRepository", (Object) problemRepository0);
      Injector.validateBean(problemService0, (Class<?>) ProblemService.class);
      problemService0.deleteProblem((Problem) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProblemService problemService0 = new ProblemService();
      CompanyRepository companyRepository0 = mock(CompanyRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "companyRepository", (Object) companyRepository0);
      ProblemRepository problemRepository0 = mock(ProblemRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(problemRepository0).findAllByTag(anyString());
      Injector.inject(problemService0, (Class<?>) ProblemService.class, "problemRepository", (Object) problemRepository0);
      Injector.validateBean(problemService0, (Class<?>) ProblemService.class);
      List<Problem> list0 = problemService0.getProblemByTag("");
      assertNull(list0);
  }
}
